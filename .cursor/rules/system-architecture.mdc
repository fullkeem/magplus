# 시스템 아키텍처

## 전체 아키텍처 개요

### 기술 스택

**Frontend**

- Next.js 15 (App Router)
- React 18
- TypeScript
- Tailwind CSS

**Backend**

- Next.js API Routes
- Supabase (PostgreSQL)
- Vercel (배포)

**상태 관리**

- Zustand (클라이언트 상태)
- SWR/React Query (서버 상태)

**데이터베이스**

- Supabase PostgreSQL
- Row Level Security (RLS)

## 데이터베이스 스키마

### 핵심 테이블

```sql
-- Categories 테이블
CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  slug VARCHAR(100) UNIQUE NOT NULL,
  description TEXT,
  image_url VARCHAR(500),
  sort_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Articles 테이블
CREATE TABLE articles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(200) NOT NULL,
  slug VARCHAR(200) UNIQUE NOT NULL,
  excerpt TEXT,
  content TEXT NOT NULL,
  images TEXT[] DEFAULT '{}',
  category_id UUID REFERENCES categories(id),
  region VARCHAR(50),
  views INTEGER DEFAULT 0,
  likes INTEGER DEFAULT 0,
  status VARCHAR(20) DEFAULT 'draft',
  meta_title VARCHAR(200),
  meta_description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Shares 테이블
CREATE TABLE shares (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  article_id UUID REFERENCES articles(id),
  platform VARCHAR(50) NOT NULL,
  share_count INTEGER DEFAULT 1,
  anonymous_id VARCHAR(100),
  shared_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## API 설계

### 공개 API 엔드포인트

| 엔드포인트                        | 메서드 | 설명               | 접근 권한 |
| --------------------------------- | ------ | ------------------ | --------- |
| `/api/articles`                   | GET    | 아티클 목록 조회   | 공개      |
| `/api/articles/[id]`              | GET    | 아티클 상세 조회   | 공개      |
| `/api/categories`                 | GET    | 카테고리 목록 조회 | 공개      |
| `/api/categories/[slug]/articles` | GET    | 카테고리별 아티클  | 공개      |
| `/api/search`                     | GET    | 아티클 검색        | 공개      |
| `/api/share`                      | POST   | 공유 통계 기록     | 공개      |

### 관리자 API 엔드포인트

| 엔드포인트              | 메서드          | 설명          | 접근 권한 |
| ----------------------- | --------------- | ------------- | --------- |
| `/api/admin/articles`   | POST/PUT/DELETE | 아티클 관리   | API Key   |
| `/api/admin/categories` | POST/PUT/DELETE | 카테고리 관리 | API Key   |

## 상태 관리 구조

### Zustand 스토어

```typescript
// 필터링 상태
interface FiltersState {
  selectedCategory: string | null;
  selectedRegion: string | null;
  searchQuery: string;
  sortBy: 'latest' | 'popular' | 'views';
}

// UI 상태
interface UIState {
  isMenuOpen: boolean;
  isPageLoading: boolean;
  showShareModal: boolean;
}

// 사용자 선호도 (로컬 저장)
interface UserPreferencesState {
  readArticles: string[];
  bookmarkedArticles: string[];
  preferredCategories: string[];
}
```

## 컴포넌트 아키텍처

### 페이지 컴포넌트

```
src/app/
├── page.tsx                 # 홈페이지
├── articles/
│   ├── page.tsx            # 아티클 목록
│   └── [id]/page.tsx       # 아티클 상세
├── categories/
│   └── [slug]/page.tsx     # 카테고리별 아티클
├── search/
│   └── page.tsx            # 검색 결과
└── about/
    └── page.tsx            # 소개 페이지
```

### 컴포넌트 계층

```
components/
├── layout/
│   ├── Header.tsx          # 헤더 (검색, 네비게이션)
│   ├── Footer.tsx          # 푸터
│   └── Layout.tsx          # 메인 레이아웃
├── article/
│   ├── ArticleCard.tsx     # 아티클 카드
│   ├── ArticleList.tsx     # 아티클 목록
│   └── ArticleDetail.tsx   # 아티클 상세
├── search/
│   ├── SearchBox.tsx       # 검색 입력
│   ├── CategoryFilter.tsx  # 카테고리 필터
│   └── RegionFilter.tsx    # 지역 필터
├── ui/
│   ├── Button.tsx          # 버튼
│   ├── Input.tsx           # 입력 필드
│   └── Modal.tsx           # 모달
└── common/
    ├── ShareButton.tsx     # 공유 버튼
    └── Breadcrumb.tsx      # 브레드크럼
```

## 보안 정책

### Row Level Security (RLS)

```sql
-- 공개 읽기 정책
CREATE POLICY "Published articles are publicly readable"
ON articles FOR SELECT
USING (status = 'published');

CREATE POLICY "Categories are publicly readable"
ON categories FOR SELECT
USING (is_active = true);

-- 공유 통계 정책
CREATE POLICY "Anyone can create share records"
ON shares FOR INSERT
WITH CHECK (true);
```

### API 보안

- **공개 API**: 레이트 리미팅 적용
- **관리자 API**: API Key 인증 필요
- **입력 검증**: 모든 사용자 입력 검증
- **CORS**: 허용된 도메인만 접근 가능

## 성능 최적화

### 캐싱 전략

```typescript
// SWR 캐싱 설정
const fetcher = (url: string) => fetch(url).then(res => res.json());

// 아티클 목록 캐싱 (5분)
const { data: articles } = useSWR('/api/articles', fetcher, {
  revalidateOnFocus: false,
  refreshInterval: 5 * 60 * 1000
});

// 카테고리 목록 캐싱 (30분)
const { data: categories } = useSWR('/api/categories', fetcher, {
  revalidateOnFocus: false,
  refreshInterval: 30 * 60 * 1000
});
```

### 이미지 최적화

- Next.js Image 컴포넌트 사용
- WebP/AVIF 형식 자동 변환
- 지연 로딩 적용
- 반응형 이미지 서빙

### 번들 최적화

- 코드 스플리팅 (페이지별)
- Tree shaking 적용
- 불필요한 의존성 제거
- 동적 import 활용

## 배포 아키텍처

### Vercel 배포

```yaml
# vercel.json
{
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "installCommand": "npm install",
  "functions": {
    "src/app/api/**/*.ts": {
      "maxDuration": 10
    }
  }
}
```

### 환경 변수

```env
# 데이터베이스
DATABASE_URL=postgresql://...
NEXT_PUBLIC_SUPABASE_URL=https://...
NEXT_PUBLIC_SUPABASE_ANON_KEY=...

# API 보안
API_SECRET_KEY=...
ADMIN_API_KEY=...

# 소셜 공유
NEXT_PUBLIC_BASE_URL=https://...
```

## 모니터링 및 분석

### 성능 모니터링

- Vercel Analytics
- Google PageSpeed Insights
- Core Web Vitals 추적

### 사용자 행동 분석

- Google Analytics (익명 추적)
- 아티클 조회 통계
- 검색 패턴 분석
- 공유 통계 수집

---

**마지막 업데이트**: 2025년 7월
**담당자**: 개발팀
**검토 주기**: 월 1회

```

```
