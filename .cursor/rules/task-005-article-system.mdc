# TASK-005: 아티클 관리 시스템 구현

## 세부 태스크 목록

### 5.1 API Routes 구현

- app/api/articles/route.ts (GET: 공개 접근, POST: API Key 인증)
- app/api/articles/[id]/route.ts (GET: 공개, PUT/DELETE: API Key 인증)
- 요청 검증 및 에러 처리
- 응답 데이터 형식 표준화
- **API Key 기반 관리자 인증** (환경변수)

### 5.2 데이터베이스 연동 설정

- **PostgreSQL 직접 연동** (Supabase Auth 제거)
- lib/database.ts 클라이언트 구성
- 서버 컴포넌트용 데이터 페칭
- 에러 핸들링 로직
- 연결 풀 관리

### 5.3 아티클 CRUD 기능

- **공개 읽기**: 모든 사용자가 아티클 조회 가능
- **관리자 쓰기**: API Key로 아티클 생성/수정/삭제
- 아티클 상태 관리 (초안/발행)
- 조회수 증가 로직 (쿠키 기반 중복 방지)

### 5.4 이미지 업로드 시스템

- **Supabase Storage 연동** (Storage만 사용)
- 이미지 업로드 컴포넌트 (관리자용)
- 이미지 최적화 처리 (WebP 변환)
- 썸네일 생성 로직
- **공개 이미지 접근** (인증 없음)

### 5.5 아티클 목록 컴포넌트

- ArticleList.tsx 구현 (공개 접근)
- 무한 스크롤 또는 페이지네이션
- 카테고리별 필터링 기능
- 지역별 필터링 기능
- 로딩 상태 처리

### 5.6 아티클 상세 컴포넌트

- ArticleDetail.tsx 구현 (공개 접근)
- 리치 텍스트 렌더링
- 이미지 갤러리 기능
- 조회수 증가 로직
- 관련 아티클 추천

### 5.7 상태 관리 및 훅

- useArticles.ts 커스텀 훅
- **Zustand 스토어 연동** (필터링 상태)
- 클라이언트 사이드 캐싱
- 낙관적 업데이트 (좋아요, 조회수)

## 완료 조건

- [x] **공개 읽기 API** 엔드포인트 작동
- [x] **API Key 기반 관리** 기능 확인
- [x] 이미지 업로드 기능 정상 작동
- [x] 아티클 목록/상세 페이지 렌더링
- [x] **인증 없는 접근** 기능 확인
- [x] 에러 처리 및 로딩 상태 완성
      description:
      globs:
      alwaysApply: false

---
